package qu.oms.repository;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import qu.oms.entity.Customer;
import qu.oms.entity.Order;
import qu.oms.entity.OrderSummary;

public class CustomerRepository implements ICustomerRepository {

	private EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("CmsDbPu");
	private EntityManager em;

	public CustomerRepository() {
		this.em = this.entityManagerFactory.createEntityManager();
		this.insertTestData(); 
	}

    public Customer getCustomer(int customerId) {
        return em.find(Customer.class, customerId);
    }

    public Customer addCustomer(Customer customer) {
		EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();
	        em.persist(customer);
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		}
        return customer;
    }

    public void updateCustomer(Customer customer) {
		EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();
	        em.merge(customer);
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		}
    }

    public void deleteCustomer(int id) {
        Query query = em.createQuery("delete from Customer c WHERE c.id = :id");
        
		EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();
	        int deletedCount = query.setParameter("id", id).executeUpdate();
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		}
    }

    public List<Customer> getCustomers() {
        return em.createQuery("select c from Customer as c").getResultList();
    }

    public Customer getCustomer(String customerName) {
        Query query = em.createQuery("select c from Customer c where c.name = :custName");
        query.setParameter("custName", customerName);
        return (Customer) query.getSingleResult();
    }

    public int getCustomersCount() {
        return ((Long) em.createQuery("select count(c) from Customer as c").getSingleResult()).intValue();
    }

    public List<OrderSummary> GetOrdersSummary() {
        Query query = em.createNamedQuery("Customer.GetOrdersSummary");
        return query.getResultList();
    }

    public OrderSummary getOrdersSummary(int customerId) {
        Query query = em.createNamedQuery("Customer.GetOrdersSummaryByCustomerId");
        query.setParameter("customerId", customerId);
        return (OrderSummary) query.getSingleResult();
    }
    
    //@PostConstruct
    public void insertTestData() {
    	if (getCustomersCount() > 0) {
    		return;
    	}
    	
    	IOrderRepository orderRepository = new OrderRepository();
        	
        Customer customer1 = new Customer("Ali Taleh");
        Customer customer2 = new Customer("Moza Ahmed");
        
        customer1 = this.addCustomer(customer1);
        customer2 = this.addCustomer(customer2);

        System.out.println(String.format("Two customers were created. Their auto-generated Ids are %d & %d\n",
            customer1.getId(), customer2.getId()));
                
        System.out.println("Inserting 2 orders for Customer with Id 1");
        // Create 2 orders
        Order order1 = new Order();
        order1.setAddress("123 University Rd, Doha, Qatar");
        order1.setQty(10);
        order1.setCustomerId(customer1.getId());
        //customer1.addOrder(order1);
        orderRepository.add(order1);

        Order order2 = new Order();
        order2.setAddress("567 1st St. Zaid Rd, Dubai, UAE");
        order2.setQty(20);
        //customer1.addOrder(order2);
        order2.setCustomerId(customer1.getId());
        orderRepository.add(order2);
        
        System.out.println("Inserting 2 orders for Customer with Id 2");
        // Create 2 orders
        Order order3 = new Order();
        order3.setAddress("123 University Rd, Doha, Qatar");
        order3.setQty(200);
        //customer2.addOrder(order3);
        order3.setCustomerId(customer2.getId());
        orderRepository.add(order3);

        Order order4 = new Order();
        order4.setAddress("567 1st St. Zaid Rd, Dubai, UAE");
        order4.setQty(100);
        //customer2.addOrder(order4);
        order4.setCustomerId(customer2.getId());
        orderRepository.add(order4);

        //this.updateCustomer(customer1);
        //this.updateCustomer(customer2);
    }
}