package qu.cms.repository;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.google.gson.Gson;

import qu.cms.entity.Contact;
import qu.utils.Utils;

public class ContactDBRepository implements IContactRepository {

	private final String contactsUrl = "https://cmps356s17.github.io/data/contacts.json";
	private EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("CmsDbPu");
	private EntityManager em;

	public ContactDBRepository() {
		this.em = this.entityManagerFactory.createEntityManager();
		this.insertTestData();
	}
    
    public List<Contact> getContacts() {
		Query query = em.createQuery("select c from Contact as c");
		return query.getResultList();
    }

    public Contact addContact(Contact contact) {
		EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();
			em.persist(contact);
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		}
		return contact;
    }
    
    public void updateContact(Contact contact) {
    	EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();
			em.merge(contact);
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		}
    }

    public void deleteContact(int contactId) {
    	EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();
	        em.remove(getContact(contactId));
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		}
    }
        
    public Contact getContact(int id) {
        return em.find(Contact.class, id);
    }

    public int getContactsCount() {
        return ((Long) em.createQuery("select count(c) from Contact as c").getSingleResult()).intValue();
    }

   
    public void insertTestData() {
       if (getContactsCount() > 0)
			return;
		
        Gson gson = new Gson();
        String contactsStr = Utils.readUrl(contactsUrl);
        System.out.println(contactsStr);

        Contact[] contactArray = gson.fromJson(contactsStr, Contact[].class);
        //Convert the array to a editable list 
        List<Contact> contacts = new ArrayList<>(Arrays.asList(contactArray));

        contacts.forEach(contact -> addContact(contact));
    }

    public List<String> getCountries() {
        List<String> countries = new ArrayList();
        countries.add("Qatar");
        countries.add("Palestine");
        countries.add("Algeria");
        countries.add("Egypt");
        countries.add("Sudan");
        countries.add("Iraq");
        countries.add("Morocco");
        countries.add("Saudi Arabia");
        countries.add("Yemen");
        countries.add("Syria");
        countries.add("Tunisia");
        countries.add("Somalia");
        countries.add("United Arab Emirates");
        countries.add("Libya");
        countries.add("Jordan");
        countries.add("Mauritania");
        countries.add("Oman");
        countries.add("Kuwait");
        countries.add("Bahrain");

        return countries;
    }
    
    public List<String> getCities(String country) {
    	/*
        try {
            Thread.sleep( 2000 );//simulate a long running action
        } catch (InterruptedException ex) {
            Logger.getLogger(ContactRepository.class.getName()).log(Level.SEVERE, "Thread sleep failed", ex);
        } */
        List<String> cities = new ArrayList<>();
        switch (country)
        {
            case "Qatar" :
                cities = Arrays.asList("Doha", "Al Khor", "Al Wakrah");
                break;
            case "Palestine" :
                cities = Arrays.asList("Quds", "Gaza", "Khan Yunis");
                break;
            case "Algeria" :
                cities = Arrays.asList("Algiers", "Oran", "Constantine");
                break;
            case "Egypt" :
                cities = Arrays.asList("Cairo", "Alexandria", "Damanhur");
                break;
            case "Sudan" :
                cities = Arrays.asList("Khartoum", "Wadi Halfa", "Taiyara");
                break;
            case "Iraq" :
                cities = Arrays.asList("Baghdad", "Basra", "Faluja");
                break;
            case "Morocco" :
                cities = Arrays.asList("Fes", "Casabalanca", "Rabat");
                break;
            case "Saudi Arabia" :
                cities = Arrays.asList("Mecca", "Madina", "Jeddah");
                break;
            case "Yemen" :
                cities = Arrays.asList("Sana'a", "Aden", "Taizz");
                break;
            case "Syria" :
                cities = Arrays.asList("Damascus", "Aleppo", "Daraa");
                break;
            case "Tunisia" :
                cities = Arrays.asList("Tunis", "Sfax", "Soussa");
                break;
            case "Somalia" :
                cities = Arrays.asList("Mogadishu", "Merca", "Qandala");
                break;
            case "United Arab Emirates" :
                cities = Arrays.asList("Dubai", "Abu Dhabi", "Sharjha");
                break;
            case "Libya" :
                cities = Arrays.asList("Tripoli", "Benghazi", "Misrata");
                break;
            case "Jordan" :
                cities = Arrays.asList("Amman", "Irbid", "Al-Aqaba");
                break;
            case "Mauritania" :
                cities = Arrays.asList("Nouakchott", "Nouadhibou", "Rosso");
                break;
            case "Oman" :
                cities = Arrays.asList("Muscat", "Nizwa", "Sohar");
                break;
            case "Kuwait" :
               cities = Arrays.asList("Kuwait city", "Ahmed Al Jaber", "Al Abdaliyah");
               break;
            case "Bahrain" :
                cities = Arrays.asList("Manama", "Riffa", "Muharraq");
                break;
        }
        
        return cities;
    }  
}
