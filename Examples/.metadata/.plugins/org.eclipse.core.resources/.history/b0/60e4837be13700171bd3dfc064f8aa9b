package qu.hifz.repository;

import com.google.gson.Gson;

import qu.hifz.entity.Surah;
import qu.utils.Utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

public class SurahRepository {

	EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("CmsDBPU");

	private EntityManager em;

	public SurahRepository() {
		this.em = this.entityManagerFactory.createEntityManager();
		this.loadSurahs();
	}

	public List<Surah> getSurahs() {
		Query query = em.createQuery("select s from Surah as s");
		return query.getResultList();
	}

	public List<Surah> getSurahsJDBC() throws ClassNotFoundException, SQLException {
		List<Surah> surahs = new ArrayList<>();
		String connURL = "jdbc:derby:memory:CmsDB;create=true";
		Connection dbConnection = null;
		Statement statement = null;

		String sqlText = "select * from SURAH";

		Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
		dbConnection = DriverManager.getConnection(connURL);
		statement = dbConnection.createStatement();

		// execute select SQL statement
		ResultSet rs = statement.executeQuery(sqlText);

		while (rs.next()) {
			String userid = rs.getString("USER_ID");
			String username = rs.getString("USERNAME");
			System.out.println("userid : " + userid);
			System.out.println("username : " + username);

			int id = rs.getInt("id");
			String name = rs.getString("name");
			String englishName = rs.getString("englishName");
			int ayaCount = rs.getInt("ayaCount");
			String type = rs.getString("type");

			Surah surah = new Surah(id, name, englishName, ayaCount, type);
			surahs.add(surah);
		}
		return surahs;
	}

	public Surah getSurah(int id) {
		return em.find(Surah.class, id);
	}

	public Surah addSurah(Surah sura) {
		EntityTransaction tx = em.getTransaction();
		try {
			tx.begin();
			em.persist(sura);
			tx.commit();
		} catch (Exception e) {
			tx.rollback();
			throw e;
		}
		return sura;
	}

	// @PostConstruct = This method will be auto-executed after the object is
	// instantiated
	@PostConstruct
	public void loadSurahs() {
		// Only load Surahs to the database and the Surah table is empty
		int surahCount = ((Long) em.createQuery("select count(s.id) from Surah as s").getSingleResult()).intValue();
		if (surahCount > 0)
			return;

		String surahsUrl = "https://cmps356s17.github.io/data/surah.json";
		Gson gson = new Gson();
		String surahsStr = Utils.readUrl(surahsUrl);
		System.out.println(surahsStr);

		Surah[] surahArray = gson.fromJson(surahsStr, Surah[].class);
		List<Surah> surahs = new ArrayList<>(Arrays.asList(surahArray));

		surahs.forEach(sura -> addSurah(sura));
	}
}